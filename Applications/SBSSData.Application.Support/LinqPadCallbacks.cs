// Ignore Spelling: Linq

using HtmlAgilityPack;

using SBSSData.Softball.Common;

namespace SBSSData.Application.Support
{
    /// <summary>
    /// Callbacks used from LINQPad generated HTML to modify the code generated by LINQPad.
    /// </summary>
    public static class LinqPadCallbacks
    {
        public static Func<TableNode, string> DsInfoCallback = (t) => $"Data Store Information"; // &mdash; [Table ID={t.Id()}; Depth,Index=({t.Depth()},{t.Index()})]";
        public static Func<TableNode, string> GamesCallback = (t) =>
        {
            string header = string.Empty;
            HtmlNode tableHtmlNode = t.TableHtmlNode;
            //Console.WriteLine($"In gamesCallback, for table ID [Depth, Index] = {tableHtmlNode.Id} [{t.Depth()}, {t.Index()}]");
            switch (t.Depth())
            {
                case 0:
                {
                    int numGames = tableHtmlNode.SelectNodes("./tbody/tr").Count;
                    HtmlNode gameInfo = tableHtmlNode.SelectSingleNode("./tbody//table/tbody");
                    string league = gameInfo.SelectNodes("./tr")[4].SelectSingleNode("./td").InnerText;
                    string title = $"{league} Game";
                    header = $"Game Results Data for the {numGames.NumDesc(title)}";
                    break;
                }
                case 1:
                {
                    if (int.IsEvenInteger(t.Index()))
                    {
                        header = "Scheduled Game Information";
                    }
                    else
                    {
                        string visitor = tableHtmlNode.SelectSingleNode("./tbody/tr[1]/td").InnerText;
                        string home = tableHtmlNode.SelectSingleNode("./tbody/tr[2]/td").InnerText;
                        header = $"Teams and Players for the {visitor} vs {home} Game";

                        Utilities.AlterTableColumnHeader(tableHtmlNode, 1, "RS");
                        Utilities.AlterTableColumnHeader(tableHtmlNode, 2, "RA");

                        HtmlNode outcomeCell = tableHtmlNode.SelectSingleNode("./tbody/tr[1]/td[5]");
                        HtmlNode centered = HtmlNode.CreateNode($"<td style=\"text-align:center;\">{outcomeCell.InnerHtml}</td>");
                        outcomeCell.ParentNode.ReplaceChild(centered, outcomeCell);

                        outcomeCell = tableHtmlNode.SelectSingleNode("./tbody/tr[2]/td[5]");
                        centered = HtmlNode.CreateNode($"<td style=\"text-align:center;\">{outcomeCell.InnerHtml}</td>");
                        outcomeCell.ParentNode.ReplaceChild(centered, outcomeCell);
                    }
                    break;
                }
                case 2:
                {
                    int rowNumber = t.Index() + 1;
                    string teamName = t.Parent?.TableHtmlNode.SelectSingleNode($"./tbody/tr[{rowNumber}]/td").InnerText ?? "Unknown";
                    header = $"Players for {teamName}";
                    tableHtmlNode = t.TableHtmlNode;

                    HtmlNode lastRow = tableHtmlNode.SelectSingleNode("./tbody/tr[last()]");
                    lastRow.Attributes.Add("style", "background-color:#ddd; font-weight:500;");

                    List<HtmlNode> columnHeaders = tableHtmlNode.SelectNodes("./thead/tr[2]/th").ToList();

                    for (int i = 5; i < 8; i++)
                    {
                        Utilities.AlterTableColumnHeader(tableHtmlNode, i, $"{i - 4}B");
                    }

                    Utilities.AlterTableColumnHeader(tableHtmlNode, 15, "OB%");
                    Utilities.AlterTableColumnHeader(tableHtmlNode, 16, "OB%+Slug");

                    HtmlNode name = lastRow.SelectSingleNode("./td[2]");
                    name.Attributes.Add("style", "background-color:red");
                    HtmlNode newName = HtmlNode.CreateNode($"<td>{name.InnerText} Totals</td>");
                    name.ParentNode.ReplaceChild(newName, name);

                    // Remove the number of games column
                    tableHtmlNode.SelectSingleNode("thead/tr[2]/th").Remove();
                    tableHtmlNode.SelectNodes("tbody/tr/td[1]").ToList().ForEach(n => n.Remove());

                    break;
                }

                default:
                {
                    break;
                }
            }

            return header;
        };

        public static Func<TableNode, string> ExtendedDsInfo(string? headerCssStyle = null, object? value = null)
        {
            return (t) =>
            {
                string header = "Data Store Information";
                HtmlNode tableHtmlNode = t.TableHtmlNode;
                int depth = t.Depth();
                int index = t.Index();
                if (!string.IsNullOrWhiteSpace(headerCssStyle))
                {
                    tableHtmlNode.SelectSingleNode("./thead/tr/td").Attributes.Add("style", headerCssStyle);
                }
                return header;
            };
        }

        public static string ProcessPlayerSummaryStats(HtmlNode tableHtmlNode, int numEntries, string shortLeagueName)
        {
            string imagePath = "PlayerPhotos/";
            //if (!Directory.Exists(imagePath))
            //{
            //    imagePath = "file:///D:/Users/Richard/Documents/Visual Studio 2022/Github Projects/SBSS/SBSSDataBuilder/Applications/SBSSData.Application.Support/PlayerPhotos/";
            //}

            string overlayTemplate = $"""

                                      <div id="overlay" class="overlay">
                                          <div id="overlayImage" style="text-align:center;">
                                              <img style="margin:auto;" src="{imagePath}[[imageName]].jpg"/>
                                          </div>
                                              <div id="overlayRankTable" style="padding-left:22px; width:220px; margin-top:10px;">[[rankTable]]</div>
                                          </div>
                                      </div>
                                      """;
            string header = string.Empty;

            UpdatePlayerColumnNames(tableHtmlNode);

            HtmlNode lastRow = tableHtmlNode.SelectSingleNode("./tbody/tr[last()]");
            lastRow.Attributes.Add("style", "background-color:#ddd; font-weight:500;");

            HtmlNode root = tableHtmlNode.Ancestors("#document").First();
            IEnumerable<HtmlNode> rows = tableHtmlNode.SelectNodes($"./tbody/tr");
            HtmlNode overlay = HtmlNode.CreateNode(overlayTemplate);
            string overlayHtml = overlay.OuterHtml;
            HtmlNode introContent = root.SelectSingleNode("//div[@id='IntroContent']");
            int numberQualified = 0;
            foreach (HtmlNode row in rows)
            {
                HtmlNode player = row.SelectSingleNode("./td[2]");
                player.Attributes.Add("style", "cursor:pointer;");
                string playerName = player.InnerText;

                // The rank table needs to be "copied" to the overlay, but the ID needs to be changed
                // so collapse and expand works, the title should be set to the value of the 
                // source rank table. So we get those values, and then restore them after the source
                // rank has been copied.
                HtmlNode rankTable = row.SelectSingleNode("./td[last()]/table");
                rankTable.Attributes.Add("style", "width:210px");
                string rankTableId = rankTable.Id;
                TableNode rankTableNode = new TableNode(rankTable);
                string headerText = rankTable.SelectSingleNode("./tbody/tr[1]/td").InnerText;
                string rankTableHeader = string.Empty;
                if (headerText == "NA")
                {
                    rankTableHeader = "Not Enough Data for Ranking";
                }
                else
                {
                    rankTableHeader = "Ranking Among Qualified Players";
                    numberQualified++;
                }

                if (playerName.Contains("Totals"))
                {
                    rankTableHeader = "Ranking Among All Players";

                    // The summary table is not a qualified PLAYER
                    numberQualified--;
                }

                header = $"Player Summary Stats for the {numEntries} Players and Rankings for {numberQualified} Players With Enough Plate Appearances for All Teams";

                // Set the new values and then restore the previous values
                rankTable.Id = rankTable.Id + playerName.RemoveWhiteSpace();

                // TODO: this should be not all, but just the players who qualify for ranking
                TableTree.SetTableHeader(rankTableNode, (t) => rankTableHeader);
                string rankTableHtml = rankTable.OuterHtml;
                rankTable.Id = rankTableId;

                // Finish up the overlay for this player. 

                Dictionary<string, string> map = PlayerPhotos.GetPlayerName2ImageNameMap();

                //string imageName = string.Empty;

                string playerKey = string.Empty;
                string? imageName;
                string[] playerNameSplit = playerName.Split(' ');
                if (playerName.Contains("Totals") && (playerNameSplit.Length > 2))
                {
                    playerKey = "Totals, League";
                    imageName = "League_Totals";
                }
                else
                {
                    playerKey = $"{playerNameSplit[1]}, {playerNameSplit[0]}";

                    if (!map.TryGetValue(playerKey, out imageName))
                    {
                        imageName = "Available_Photo-Not";
                    }
                }

                string overlayTemplateFN = overlayTemplate.Replace("[[imageName]]", imageName);//.Dump("after file name");
                string newOverlayHtml = overlayTemplateFN.Replace("[[rankTable]]", rankTableHtml);//.Dump("new overlay html");
                HtmlNode newOverlay = HtmlNode.CreateNode(newOverlayHtml);

                newOverlay.Id = $"{playerName.RemoveWhiteSpace()}{shortLeagueName.RemoveWhiteSpace()}Overlay";
                string newOverlayId = newOverlay.Id;
                string dataName = $"{playerName.RemoveWhiteSpace()}";
                newOverlay.Attributes.Add("dataName", dataName);
                newOverlay.Attributes.Add("style", "display:none");
                newOverlayHtml = newOverlay.OuterHtml.Replace("\r\n", " ");

                // Insert this new overlay in the page so it can be found by the mouseover and mouseout event handlers.
                introContent = root.SelectSingleNode("//body/div");
                introContent.InsertAfter(newOverlay, introContent.ChildNodes[2]);
                player.Attributes.Add("onmouseover", $"getElementById('{newOverlayId}').style.display='table-cell'");
                player.Attributes.Add("onmouseout", $"getElementById('{newOverlayId}').style.display='none';");
            }

            return header;
        }

        public static Func<TableNode, string> ExtendedGamesTeamPlayers(string? info = null, object? value = null)
        {
            return (t) =>
            {
                string fullLeagueName = info ?? "league";
                string shortLeagueName = fullLeagueName.Substring(0, fullLeagueName.LastIndexOf(' '));
                HtmlNode tableHtmlNode = t.TableHtmlNode;
                string header = t.Header().InnerText;
                int depth = t.Depth();
                int index = t.Index();

                // Do not count the summary totals row.
                int numEntries = tableHtmlNode.SelectNodes("./tbody/tr").Count();
                HtmlNode? group = null;
                if (depth == 1)
                {
                    group = tableHtmlNode.ParentNode?.PreviousSibling;
                }
                else if (depth == 2)
                {
                    group = t.Parent?.TableHtmlNode.ParentNode.PreviousSibling;
                }

                string groupName = (group != null) ? group.InnerText.Replace("&nbsp;", " ") : string.Empty;

                //Console.WriteLine($"Processing {t.Id()} in group {groupName} at depth {t.Depth()} and index {t.Index()}");


                switch (depth)
                {
                    case 0:
                    {
                        header = $"Games, Teams and Players for the {fullLeagueName} League";
                        tableHtmlNode.SelectNodes("./tbody/tr/th").ToList().ForEach(th => th.Attributes.Add("style", "display:none"));
                        tableHtmlNode.SelectSingleNode("./thead/tr/td").Attributes.Add("style", "font-size:1.25em;  background-color:#d62929");
                        break;
                    }
                    case 1:
                    {
                        switch (index)
                        {
                            case 0:
                            {
                                string title = $"{shortLeagueName} Game";
                                header = $"Game Results Data for the {numEntries.NumDesc(title)}";
                                break;
                            }
                            case 1:
                            {
                                header = $"Team Summary Data and Standings for the {numEntries} {shortLeagueName} Teams";
                                break;
                            }
                            case 2:
                            {
                                // Do count summary player as an entry
                                header = ProcessPlayerSummaryStats(tableHtmlNode, numEntries - 1, shortLeagueName);
                                break;
                            }
                        }
                        break;
                    }
                    case 2:
                    {
                        if (groupName == "Team Players")
                        {
                            int rowNumber = index + 1;
                            string? teamName = t.Parent?.TableHtmlNode?.SelectSingleNode($"./tbody/tr[{rowNumber}]").FirstChild.InnerText;
                            header = $"Summary Stats for all {ToSpanItalic(teamName ?? string.Empty)} Players";

                            HtmlNode lastRow = tableHtmlNode.SelectSingleNode("./tbody/tr[last()]");
                            lastRow.Attributes.Add("style", "background-color:#ddd; font-weight:500;");

                            UpdatePlayerColumnNames(tableHtmlNode);

                            HtmlNode name = lastRow.SelectSingleNode("./td[2]");
                            HtmlNode newName = HtmlNode.CreateNode($"<td>{name.InnerText} Totals</td>");
                            name.ParentNode.ReplaceChild(newName, name);

                        }
                        else if (groupName == "Games and Teams")
                        {
                            if (int.IsEvenInteger(index))
                            {
                                header = "Scheduled Game Information";
                            }
                            else
                            {
                                string gameName = tableHtmlNode.ParentNode.PreviousSibling.SelectSingleNode("./table/tbody/tr/td").InnerText;
                                header = $"Teams and Players for the {ToSpanItalic(gameName)} Game";

                                Utilities.AlterTableColumnHeader(tableHtmlNode, 1, "RS");
                                Utilities.AlterTableColumnHeader(tableHtmlNode, 2, "RA");

                                HtmlNode outcomeCell = tableHtmlNode.SelectSingleNode("./tbody/tr[1]/td[5]");
                                HtmlNode centered = HtmlNode.CreateNode($"<td style=\"text-align:center;\">{outcomeCell.InnerHtml}</td>");
                                outcomeCell.ParentNode.ReplaceChild(centered, outcomeCell);

                                outcomeCell = tableHtmlNode.SelectSingleNode("./tbody/tr[2]/td[5]");
                                centered = HtmlNode.CreateNode($"<td style=\"text-align:center;\">{outcomeCell.InnerHtml}</td>");
                                outcomeCell.ParentNode.ReplaceChild(centered, outcomeCell);
                            }
                        }
                        break;
                    }
                    case 3:
                    {
                        int rowNumber = t.Index() + 1;
                        string teamName = t.Parent?.TableHtmlNode.SelectSingleNode($"./tbody/tr[{rowNumber}]/td").InnerText ?? "Unknown";
                        header = $"Players for {ToSpanItalic(teamName)}";
                        tableHtmlNode = t.TableHtmlNode;

                        HtmlNode lastRow = tableHtmlNode.SelectSingleNode("./tbody/tr[last()]");
                        lastRow.Attributes.Add("style", "background-color:#ddd; font-weight:500;");

                        UpdatePlayerColumnNames(tableHtmlNode);

                        HtmlNode name = lastRow.SelectSingleNode("./td[2]");
                        HtmlNode newName = HtmlNode.CreateNode($"<td>{name.InnerText} Totals</td>");
                        name.ParentNode.ReplaceChild(newName, name);

                        // Remove the number of games column
                        tableHtmlNode.SelectSingleNode("thead/tr[2]/th").Remove();
                        tableHtmlNode.SelectNodes("tbody/tr/td[1]").ToList().ForEach(n => n.Remove());
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }

                //header += $" &mdash; [Depth:{t.Depth()}; Index:{t.Index()}; Entries:{numEntries}]";
                return header;
            };
        }

        private static void UpdatePlayerColumnNames(HtmlNode tableHtmlNode)
        {
            int columnIndex = Utilities.GetTableColumnIndex(tableHtmlNode, "Singles");
            if (columnIndex != -1)
                for (int i = columnIndex; i < (columnIndex + 3); i++)
                {
                    Utilities.AlterTableColumnHeader(tableHtmlNode, i, $"{i - 4}B");
                }
            columnIndex = Utilities.GetTableColumnIndex(tableHtmlNode, "OBP");
            if (columnIndex != -1)
            {
                Utilities.AlterTableColumnHeader(tableHtmlNode, columnIndex, "OB%");
                Utilities.AlterTableColumnHeader(tableHtmlNode, columnIndex + 1, "OB%+Slug");
            }
        }


        private static string ToSpanItalic(string text)
        {
            return $"""<span style="font-style:italic">{text}</span>""";
        }
    }
}
